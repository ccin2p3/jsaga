<?xml version="1.0" encoding="UTF-8"?>
<faqs title="Developers How To">
    <part id="adaptors">
        <title>Developing adaptors</title>
        <faq id="adaptor-pre-requisites">
            <question>What are the pre-requisites for building JSAGA adaptors ?</question>
            <answer>
                <ul>
                    <li>Install <a href="http://java.sun.com/j2se/1.5/download.html">JDK 1.5</a> (or above)</li>
                    <li>Install <a href="http://archive.apache.org/dist/maven/binaries/">Maven 2.0.9</a></li>
                </ul>
            </answer>
        </faq>
        <faq id="adaptor-create">
            <question>How to create a new adaptor for JSAGA ?</question>
            <answer>
                <ul>
                    <li>Install <a href="http://grid.in2p3.fr/maven2/org/apache/maven/archetypes/maven-archetype-jsaga/1.0/maven-archetype-jsaga-1.0.jar">JSAGA Archetype 1.0</a> (or later)
                        <pre>mvn install:install-file -DgroupId=org.apache.maven.archetypes \
-DartifactId=maven-archetype-jsaga -Dversion=1.0 -Dpackaging=jar \
-Dfile=maven-archetype-jsaga-1.0.jar</pre>
                    </li>
                    <li>Create your adaptor (replace _your.company.namespace_ and _name_ with your own values)
                        <pre>mvn archetype:create -DarchetypeArtifactId=maven-archetype-jsaga \
-DarchetypeVersion=1.0 -DgroupId=_your.company.namespace_ \
-DartifactId=jsaga-adaptor-_name_</pre>
                    </li>
                    <li>Set the version of the JSAGA engine (replace _version_ with the version you want to use)
                        <pre>VERSION=_version_
sed -i pom.xml -e "s/CHANGEME/$VERSION/g"</pre>
                    </li>
                    <li>Install all the dependencies
                        <pre>mvn validate -s profiles.xml</pre>
                    </li>
                    <li>Rename and modify the class MyProtocolDataAdaptor to implements some of
                        the <a href="jsaga-adaptoritf/apidocs/index.html">adaptor interfaces</a>.</li>
                </ul>
            </answer>
        </faq>
        <faq id="adaptor-integration-test">
            <question>How to run integration tests ?</question>
            <answer>
                <ul>
                    <li><b>From your build environment:</b>
                        <p>Most adaptors allow for listing available tests:</p>
                        <pre>ls test/src/integration/
mvn integration-test -Dtest={integration.MyProtocolIntegrationTestSuite}\$index</pre>
                        <p>To run {SubTest1} only, enter:</p>
                        <pre>mvn integration-test -Dtest={integration.MyProtocolIntegrationTestSuite\$SubTest1}</pre>
                        <p>Errors are logged into build/surefire-reports/{integration.MyProtocolIntegrationTestSuite$SubTest1}.txt</p>
                        <p><i>Note: On Unix-like operating systems, the '$' must be escaped ('\$').</i></p>
                    </li>
                    <li><b>From an installation of JSAGA:</b>
                        <p>To run {MyProtocolIntegrationTestSuite}, enter:</p>
                        <pre>junit-run-test {integration.MyProtocolIntegrationTestSuite}</pre>
                        <p>Errors are displayed on console.</p>
                    </li>
                </ul>
            </answer>
        </faq>
        <faq id="configure-test-suite">
            <question>How to configure test-suite ?</question>
            <answer>There are 4 configuration files:
                <ul>
                    <li><i>test/resources/etc/jsaga-config.properties</i>: is not used by test-suite (used when testing your configuration with JSAGA CLIs).</li>
                    <li><i>test/resources/etc/jsaga-universe.xml</i>: configures your adaptor and its security context.</li>
                    <li><i>test/resources/etc/log4j.properties</i>: configures log severity thresholds for test-suite.</li>
                    <li><i>test/resources/saga-test.properties</i>: configures the test-suite (i.e. URLs and test parameters).</li>
                </ul>
                Content of file saga-test.properties depends on the type of adaptor:
                <ul>
                    <li>For a security adaptor:
                        <pre># can be empty</pre>
                    </li>
                    <li>For a data adaptor:
                        <pre><i>myprotocol</i>.base.url=uri://...
<i>myprotocol</i>.base2.url=uri://...
test.base.url=test://emulator.test.org:1234/</pre>
                    </li>
                    <li>For a job adaptor:
                        <pre><i>myprotocol</i>.jobservice.url=uri://...
# optional test parameters:
<i>myprotocol</i>.finalyTimeout=...
<i>myprotocol</i>.maxQueuingTime=...
<i>myprotocol</i>.candidate.host=...</pre>
                    </li>
                </ul>
            </answer>
        </faq>
        <faq id="create-test-entries">
            <question>How to create files and directories for data test suite ?</question>
            <answer><pre>mkdir -p dir/subdir ; echo "Content of file 1..." > dir/subdir/file1.txt
mkdir -p dir2/subdir ; echo "Content of file 2 on base2.url..." > dir2/subdir/file2.txt</pre>
            </answer>
        </faq>
    </part>
    <part id="engine">
        <title>Developing JSAGA engine</title>
        <faq id="developer-pre-requisites">
            <question>What are the pre-requisites for building JSAGA entirely ?</question>
            <answer>
                <ul>
                    <li>Install <a href="http://java.sun.com/j2se/1.5/download.html">JDK 1.5</a> (or above)</li>
                    <li>Install <a href="http://archive.apache.org/dist/maven/binaries/">Maven 2.0.9</a></li>
                    <!-- maven releases prior to 2.0.9 have undeterministic ordering of dependencies -->
                    <li>Optional: releasing JSAGA requires SSH to be installed</li>
                    <li>Optional: some adaptors requires gcc compiler to be installed
                        (these adaptors must either be built on both windows and linux platforms,
or you can build everything from windows by installing <a href="http://www.cygwin.com/">cygwin</a>,
<a href="http://prdownloads.sourceforge.net/metamod-p/cygwin-gcc-3.3.6-glibc-2.3.2-linux.tar.bz2">cross-compiler for linux</a>
and JNI header files for linux)
                    </li>
                </ul>
            </answer>
        </faq>
        <faq id="build-from-source">
            <question>How to build JSAGA from source ?</question>
            <answer>
                <ul>
                    <li>Install and configure SSH according to <a href="https://cvs.in2p3.fr/doc-en.html#access">these instructions</a></li>
                    <li>Download <a href="files/bootstrap/pom.xml">bootstrap POM file</a></li>
                    <li>Build from latest source code
                        <pre>mvn scm:bootstrap [-Dmaven.scm.cvs.java.cvs_rsh=_path/to/ssh_]</pre>
                        Or build an old release
                        <pre>TAG={release_tag}
mvn scm:bootstrap -DscmVersionType=tag -DscmVersion=$TAG -Dgoals=deploy,site-deploy \
                 [-Dmaven.scm.cvs.java.cvs_rsh=_path/to/ssh_]</pre>
                    </li>
                </ul>
            </answer>
        </faq>
        <faq id="make-release">
            <question>How to release JSAGA ?</question>
            <answer>
                <ul>
                    <li>Update the release notes
                        <br/>
                    </li>
                    <li>Cleanup
                        <pre>cd ../build-tools ; mvn clean
cd ../jsaga ; mvn -f pom-unreleased.xml clean ; mvn clean
cd jsaga-adaptorpom ; mvn uninstall:all</pre>
                    </li>
                    <li>Start an SSH agent (required for "mvn validate release:*")
                        <pre>eval `ssh-agent`
ssh-add {path_to_cvs_key}</pre>
                    </li>
                    <li>Commit every changes to CVS repository
                        <br/>
                    </li>
                    <li>Make the release
                        <pre>LOCAL_BASE=c:/grid.in2p3.fr
cd ../build-tools ; mvn deploy site-deploy
mv $LOCAL_BASE/application/ $LOCAL_BASE/build-tools/

cd ../jsaga ; mvn -f pom-unreleased.xml deploy clean
cd saga-api ; mvn site-deploy
cd .. ; mvn install
mvn validate release:prepare
export MAVEN_OPTS=-Xmx256m
mvn validate release:perform
mv $LOCAL_BASE/application/ $LOCAL_BASE/jsaga/

echo "Options +Indexes" > $LOCAL_BASE/maven2/.htaccess</pre>
                    </li>
                    <li>Synchronize directories
                        <pre>REMOTE_BASE=ccali:/afs/in2p3.fr/home/throng/ccin2p3/grid/www/grid
cd $LOCAL_BASE
rsync --progress -azC --force -e ssh maven2/fr/in2p3/jsaga/jsaga-installer/ \
      $REMOTE_BASE/archives/jsaga/
rsync --progress -azC --force -e ssh maven2/ $REMOTE_BASE/maven2/
rsync --progress -azC --force -e ssh --delete build-tools/ $REMOTE_BASE/build-tools/
rsync --progress -azC --force -e ssh --delete jsaga/ $REMOTE_BASE/jsaga/</pre>
<!-- rsync . gridsoft@grid2.in2p3.fr:/www/htdocs/jsaga/ -->
                    </li>
                </ul>
            </answer>
        </faq>
        <faq id="make-snapshot">
            <question>How to deploy a snapshot of JSAGA ?</question>
            <answer>
                <ul>
                    <li>Make a full snapshot
                        <pre>LOCAL_BASE=c:/grid.in2p3.fr
export MAVEN_OPTS=-Xmx256m
mvn deploy site-deploy
mv $LOCAL_BASE/application/ $LOCAL_BASE/jsaga-dev/</pre>
                        Or make a quick snapshot (jsaga-installer only)
                        <pre>LOCAL_BASE=c:/grid.in2p3.fr
mvn install     # update maven local repository for building jsaga-installer
cd jsaga-installer/
mvn deploy site-deploy
mv $LOCAL_BASE/application/ $LOCAL_BASE/jsaga-dev/</pre>
                    </li>
                    <li>Correct the web pages for development release
                        <pre>mv $LOCAL_BASE/jsaga-dev/images/logo-jsaga-dev.png $LOCAL_BASE/jsaga-dev/images/logo-jsaga.png
VERSION=`ls $LOCAL_BASE/maven2/fr/in2p3/jsaga/jsaga-installer/*/jsaga-installer*.jar \
       | sed -e "s|.*/jsaga-installer-[^-]*-\(.*\)\.jar.\?|\1|"`
sed -i $LOCAL_BASE/jsaga-dev/download.html -e "s/SNAPSHOT\([^\/]\)/$VERSION\1/g"
echo $VERSION</pre>
                    </li>
                    <li>Synchronize directories
                        <pre>REMOTE_BASE=ccali:/afs/in2p3.fr/home/throng/ccin2p3/grid/www/grid
cd $LOCAL_BASE
rsync --progress -azC --force -e ssh maven2/ $REMOTE_BASE/maven2/
rsync --progress -azC --force -e ssh jsaga-dev/ $REMOTE_BASE/jsaga-dev/</pre>
                    </li>
                </ul>
            </answer>
        </faq>
        <faq id="work-offline">
            <question>How to work off-line ?</question>
            <answer>
                <p>While you are still connected, execute all the goal you expect to use on your project(s)</p>
                <pre>mvn clean deploy site-deploy
mvn idea:idea
mvn help:effective-pom
mvn archetype:create</pre>
            </answer>
        </faq>
        <faq id="eclipse">
            <question>How to import the maven project into Eclipse (http://www.eclipse.org/) ?</question>
            <answer>
Either generate Eclipse project from maven CLI:
                <ul>
                    <li>Set the Eclipse "Classpath Variable" M2_REPO to the path of your maven local repository.</li>
                    <li><pre>mvn -f pom-unrelease.xml install
mvn -s profiles.xml eclipse:eclipse</pre></li>
                    <li>File / import existing projects into workspace and select the jsaga directory.</li>
                    <li>(for more information see: http://maven.apache.org/guides/mini/guide-ide-eclipse.html
http://laurent.granie.free.fr/index.php?2006/12/13/25-maven2-et-eclipse)</li>
                </ul>
Or install and use the plugin Q (http://code.google.com/p/q4e/)
            </answer>
        </faq>
        <faq id="idea">
            <question>How to import the maven project into Intellij IDEA (http://www.jetbrains.com/idea/)</question>
            <answer>
                <pre>mvn install                     # create the "generated-sources/" directories
mvn idea:idea
sed -i "s|\$PROJECT_DIR\$.*/jsaga/|\$PROJECT_DIR\$/|" jsaga.ipr  # workaround</pre>
            </answer>
        </faq>
    </part>
</faqs>
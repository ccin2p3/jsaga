<?xml version="1.0" encoding="UTF-8"?>
<faqs title="Developers Frequently Asked Questions">
    <part id="developing">
        <title>Developing JSAGA engine</title>
        <faq id="developer-pre-requisites">
            <question>What are the pre-requisites for building JSAGA entirely ?</question>
            <answer>
                <ul>
                    <li>Install <a href="http://java.sun.com/j2se/1.5/download.html">JDK 1.6</a> (or above)</li>
                    <li>Install <a href="http://archive.apache.org/dist/maven/binaries/">Maven 3.0.4</a></li>
                    <li>Optional: releasing JSAGA requires SSH to be installed</li>
                    <li>Optional: some adaptors requires gcc compiler to be installed
                        (these adaptors must either be built on both windows and linux platforms,
or you can build everything from windows by installing <a href="http://www.cygwin.com/">cygwin</a>,
<a href="http://prdownloads.sourceforge.net/metamod-p/cygwin-gcc-3.3.6-glibc-2.3.2-linux.tar.bz2">cross-compiler for linux</a>
and JNI header files for linux)
                    </li>
                </ul>
            </answer>
        </faq>
        <faq id="build-from-source">
            <question>How to build JSAGA from source ?</question>
            <answer>
                <ul>
                    <li>Install and configure SSH according to <a href="https://git.in2p3.fr/doc-en.html#access">these instructions</a></li>
                    <li>Download <a href="files/bootstrap/pom.xml">bootstrap POM file</a></li>
                    <li>Build from latest source code
                        <pre>mvn scm:bootstrap</pre>
                        Or build an old release
                        <pre>TAG={release_tag}
mvn scm:bootstrap -DscmVersionType=tag -DscmVersion=$TAG -Dgoals=deploy,site-deploy</pre>
                    </li>
                </ul>
            </answer>
        </faq>
        <faq id="make-release">
            <question>How to release JSAGA ?</question>
            <answer>
                <ul>
                    <li>Update the release notes
                        <br/>
                    </li>
                    <li>Update from GIT and select the branch "master"
                        <pre>git pull
git checkout master</pre>
                    </li>
                    <li>From a ccdevli host, run:
                        <pre>export MAVEN_OPTS=-Xmx256m
mvn -f pom-unreleased.xml deploy

mvn release:prepare
mvn install ; mvn release:prepare   # workaround
mvn release:perform -P release</pre>
                    </li>
                </ul>
            </answer>
        </faq>
        <faq id="make-snapshot">
            <question>How to deploy a snapshot of JSAGA ?</question>
            <answer>
                <ul>
                    <li>Update from GIT and select the branch to build
                        <pre>git pull
git checkout &lt;yourBranch&gt;</pre>
                    </li>
                    <li>From a ccdevli host, run:
                        <pre>export MAVEN_OPTS=-Xmx256m
mvn -f pom-unreleased.xml deploy

mvn deploy site-deploy</pre>
                    </li>
                </ul>
            </answer>
        </faq>
        <faq id="test-web-site">
            <question>How to test web site generation without deploying it ?</question>
            <answer>From a ccdevli host, run:
                <pre>export MAVEN_OPTS=-Xmx256m
mvn site-deploy -P local</pre>
            </answer>
        </faq>
        <faq id="maven-repository">
            <question>How to configure apache for maven repository ?</question>
            <answer>Create file .htaccess with the following content:
                <pre>Options +Indexes
IndexOptions +NameWidth=* +DescriptionWidth=*
AddDescription " " .md5
AddDescription " " .sha1
AddDescription "Tarball distribution" .tar.gz
AddDescription "ZIP distribution" .zip
AddDescription "GUI Installer" .jar</pre>
            </answer>
        </faq>
    </part>
    <part id="git">
        <title>GIT</title>
        <faq id="merge">
            <question>How to merge a contribution into the reference repository ?</question>
            <answer>
                <pre># Get branch name
git ls-remote ssh://git.in2p3.fr/jsaga-contrib

# Pull contribution in branch "mergedBranch"
git checkout -b mergedBranch master
git pull ssh://git.in2p3.fr/jsaga-contrib &lt;branch name&gt;

# Merge it in branch "master"
git checkout master
git merge mergedBranch

# Cleanup
git branch -d mergedBranch</pre>
            </answer>
        </faq>
        <faq id="merge-without-history">
            <question>How to merge a branch without detailed history ?</question>
            <answer>Use unix diff instead of "git format-patch":
                <pre># Update local repository
git pull

# Create patch
git checkout workingBranch
git diff origin/master > mydiff.patch

# Apply patch
git checkout -b mergedBranch master
git apply --stat myDiff.patch
git apply --check myDiff.patch
git apply myDiff.patch

# Merge
git checkout master
git merge mergedBranch

# Delete remote and local branches
git push origin :workingBranch
git branch -D workingBranch
git branch -d mergedBranch
git branch -al</pre>
                WARNING: This does not work if some binary files have been modified.
            </answer>
        </faq>
        <faq id="apply-patch">
            <question>How to apply and merge a patch ?</question>
            <answer>Use "git apply-patch" or "git am":
                <pre># Update local repository
git pull

# Apply patch
git checkout -b mergedBranch master
git am --ignore-space-change --ignore-whitespace patch.mbox

# Check changes with IDE (GIT -> Push Active Branches...)

# Merge
git checkout master
git merge mergedBranch

# Delete local branch
git branch -d mergedBranch
git branch -al</pre>
            </answer>
        </faq>
        <faq id="apply-conflicting-patch">
            <question>How to apply and merge a conflicting patch ?</question>
            <answer>Checkout a non-conflicting (past) version of branch 'master':
                <pre>$ git rev-list -n 1 --before="2011-12-27 00:00" master
e0ad6b79cc64d5720a9754231146438ceb1ddaf3

$ git checkout -b new_branch_name e0ad6b79cc64d5720a9754231146438ceb1ddaf3
HEAD is now at e0ad6b7... log message of patch</pre>
                <ul>
                    <li>Apply patch (see above)</li>
                    <li>Interactively rebase 'new_branch_name' onto 'master'</li>
                    <li>Configure 'master' as the tracked branch</li>
                    <li>Push active changes</li>
                </ul>
            </answer>
        </faq>
        <faq id="rebase-published-branch">
            <question>How to rebase a published branch</question>
            <answer>Note: you should not rebase a branch if it has been modified by other contributors.
                <pre># Update local repository
git pull

git checkout workingBranch
# perform interactive rebasing onto branch "master"
# in case of conflict, add the conflicting file(s) to GIT (but do not commit them)

# replace old branch (remote) with rebased branch (local)
git push origin :workingBranch
git push workingBranch
                </pre>
            </answer>
        </faq>
        <faq id="fix-release">
            <question>How to fix a small problem (e.g. typo in generated web page) in a release, without creating a new release ?</question>
            <answer>
                <pre># Update the release tag
git checkout &lt;release_tag&gt;
git show
git checkout -b &lt;release_tag&gt;
git show
vim pom.xml
git diff
git commit -m 'tag bis' pom.xml
git tag -f &lt;release_tag&gt;
git push origin --tags
git branch -D &lt;release_tag&gt;
                </pre>
                DO NOT FORGET TO DO THE SAME FIX IN BRANCH 'master' !
                DO NOT FORGET TO FETCH TAGS (git fetch --tags) ON ALL REPOSITORY CLONES !
            </answer>
        </faq>
    </part>
</faqs>
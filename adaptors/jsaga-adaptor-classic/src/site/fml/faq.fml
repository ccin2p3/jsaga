<?xml version="1.0" encoding="UTF-8"?>
<faqs title="Frequently Asked Questions">
    <part id="module">
        <title>Adaptor module</title>
        <faq id="jsaga-help">
            <question>How do I use this module ?</question>
            <answer>The command "jsaga-help" provides some useful information about the usage
                and the current configuration of the plug-ins.
                <pre>jsaga-help -help</pre>
                If this command does not provides the answer to your question, then
                please contact us so that we can fill out this FAQ.
            </answer>
        </faq>
    </part>
    <part id="https">
        <title>HTTPS</title>
        <faq id="client-authentication">
            <question>How to enable client authentication ?</question>
            <answer>Configure the HTTPS plug-in to use a security context of one of the following types:
                <ul>
                    <li>X509: the certificate must be in a PKCS12 file</li>
                    <li>JKS: the certificate must be in a Java Keystore</li>
                </ul>
            </answer>
        </faq>
        <faq id="mutual-authentication">
            <question>How to enable mutual authentication ?</question>
            <answer>Configure the HTTPS plug-in...
                <ul>
                    <li>with attribute "MutualAuthentication" set to value "true"</li>
                    <li>use a security context of type "JKS" (mutual authentication
                        with context type "X509" is not supported)</li>
                </ul>
            </answer>
        </faq>
        <faq id="jks">
        	<question>How do I use the Java keystore in JSAGA ?</question>
        	<answer>Specify the keystore name and password in Java properties:
        		<pre>-Djavax.net.ssl.keyStore=your_keystore_path -Djavax.net.ssl.keyStorePassword=your_password</pre>
        		If no keystore file is given in properties, JSAGA will search for a file with the following path:
        		<pre>~/.jsaga/.keystore</pre>
        		There is no default value for password. You can also specify a trustStore (that contains certificates of the
        		trusted CAs) and a truststore password :
        		<pre>-Djavax.net.ssl.trustStore=your_truststore_path -Djavax.net.ssl.trustStorePassword=your_password</pre>
        		If no truststore is given in properties, JSAGA will search for a file with the following path:
        		<pre>~/.jsaga/.keystore</pre>
        		If this file does not exist, the default values will be used by JSSE (Java security layer):
        		<ul>
        			<li><pre>$JAVA_HOME/lib/security/jssecacerts</pre></li>
        			<li><pre>$JAVA_HOME/lib/security/cacerts</pre></li>
        		</ul>.
        		There is no default value for password.
        		It is possible to override these values in the JKS adaptor configuration.
        	</answer>
        </faq>
        <faq id="jks-keys">
        	<question>Does JSAGA support multiple keys in a keystore ?</question>
        	<answer>Yes but each key must have an alias in the keystore. The alias must be specified in the configuration
        	for the adaptor to be able to retrieve the appropriate key for authentication.</answer>
        </faq>
        <faq id="jks-import-keys">
            <question>How to import a certificate and a key into the Java Keystore ?</question>
            <answer>The certificate and the key should be in a PKCS12 (.p12) file. You can use
            the JKSImportCert utility provided with JSAGA:
                 <pre>java -cp $JSAGA_HOME/lib-adaptors/jsaga-adaptor-classic-*.jar \
 fr.in2p3.jsaga.adaptor.security.JKSImportCert mycert.p12 passphrase</pre>
                 If the keystore already exist, you may need to change the default values:
                 <pre>-Djavax.net.ssl.keyStore=your_keystore -Djavax.net.ssl.keyStorePassword=your_password</pre>
            </answer>
        </faq>
        <faq id="jks-import-certs">
            <question>How to import CA certificates into the Java Keystore ?</question>
            <answer>Use the "keytool" command line interface from Java distribution (use a different alias for each imported CA)
				<pre>keytool -import -alias alias_name -file CA_certificate -keystore your_truststore</pre>
            </answer>
            To import multiple certificates with a single command:
            <pre>for i in *.pem ; do keytool -keystore your_truststore -import -file $i -noprompt \
 -alias `basename $i`; done</pre>
        </faq>
        <faq id="pem_to_p12">
            <question>How to convert certificate from PEM to PKCS12 ?</question>
            <answer>Use the "openssl" command line interface from Linux/Cygwin distribution:
                <pre>openssl pkcs12 -export -in usercert.pem -inkey userkey.pem -out mycert.p12</pre>
            </answer>
        </faq>
        <faq id="crt_to_p12">
            <question>How to convert certificate from CRT to PKCS12 ?</question>
            <answer>Use the "openssl" command line interface from Linux/Cygwin distribution:
                <pre>openssl pkcs12 -export -in mycert.crt -inkey mycert.key -out mycert.p12</pre>
            </answer>
        </faq>
    </part>
    <part id="execution">
        <title>Execution management</title>
        <faq id="url">
            <question>What is the URL syntax understood by this plug-in ?</question>
            <answer>The URL must be:
                <pre><![CDATA[local://localhost]]></pre>
            </answer>
        </faq>
        <faq id="windows">
            <question>What are the pre-requisites to use this plug-in on Windows ?</question>
            <answer>You must install <a href="http://www.cygwin.com/">cygwin</a>, and configure
                the path to the shell executable in file $HOME/.jsaga/jsaga-user.properties
                <pre><![CDATA[local.default.ShellPath=C\:\\cygwin\\bin\\sh.exe]]></pre>
            </answer>
        </faq>
    </part>
</faqs>